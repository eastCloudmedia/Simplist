<?php

namespace Route\Core;

use Controller\Panel\UserController;

class Router
{

    protected static $BaseController="Controller\\";
    protected static $BaseMiddleware="Middleware\\";
    public static function Register()
    {
        $CurrentRoute= self::getCurrentRoute();
        $Routes = self::isRouteDefined("$CurrentRoute");
        $gRequestVerb = $Routes['gverb'];
        $pRequestVerb = $Routes['pverb'];
        $CurrentRouteVerb = self::currentRequestVerb();

        if (($CurrentRouteVerb==$gRequestVerb && $gRequestVerb!="")||($CurrentRouteVerb==$pRequestVerb && $pRequestVerb!=""))
        {
            list($Folder,$Controller,$Method)=explode(".",$Routes['target']);
            $ControllerClass= self::$BaseController.$Folder."\\".$Controller."Controller";
            $ControllerInstance = new $ControllerClass;
            if ($Routes['middleware']!="")
            {
                list($Way,$Series,$Check)=explode(".",$Routes['middleware']);
                $MiddlewareClass = self::$BaseMiddleware.$Way."\\".$Series."Middleware";
                $MiddlewareInstance= new $MiddlewareClass;
                if (method_exists($ControllerInstance,"$Method")&& method_exists($MiddlewareInstance,"$Check"))
                {
                    if($MiddlewareInstance->$Check()['Status'])
                    {
                        $ControllerInstance->$Method();
                    }
                    else
                    {
                        header("Location: /Badrequest");
                    }
                }
            }
            else if (method_exists($ControllerInstance,"$Method"))
            {
                $ControllerInstance->$Method();
            }
            else
            {
                return $Routes['/NotFound'];
            }
        }
        else
        {
            if ($CurrentRouteVerb==$gRequestVerb && $gRequestVerb=="")
            {
                header("Location: /MethodNotAllowed");
            }
            else if($CurrentRouteVerb==$pRequestVerb && $pRequestVerb=="")
            {
                header("Location: /MethodNotAllowed");
            }
            else
            {
                header("Location: /MethodNotAllowed");

            }

        }
    }

    public static function getCurrentRoute()
    {
        return $_SERVER['REQUEST_URI'];
    }

    public static function isRouteDefined(string $Route)
    {
        $Routes = self::getRoutes();
        if (array_key_exists($Route,$Routes))
        {
            return $Routes[$Route];
        }
        else
        {
            return $Routes['/NotFound'];
        }
    }

    public static function getRoutes()
    {
        $Routes = include PATH . DIRECTORY_SEPARATOR . 'Setting/Routes.phtml';
        return $Routes;
    }
    public static function currentRequestVerb()
    {
        return $_SERVER['REQUEST_METHOD'];
    }
}
?>